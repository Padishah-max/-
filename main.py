# main.py ‚Äî —Ä–µ–∂–∏–º WEBHOOK –¥–ª—è Render, –∞–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
import os, json, sqlite3, asyncio, time, logging
from dataclasses import dataclass
from typing import List, Optional, Dict, Set, Tuple

import httpx
import openpyxl
from openpyxl.utils import get_column_letter

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes,
    CommandHandler, CallbackQueryHandler, PollAnswerHandler
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("quizbot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
BOT_TOKEN   = (os.getenv("BOT_TOKEN")   or "").strip()
PUBLIC_URL  = (os.getenv("PUBLIC_URL")  or "").strip().rstrip("/")
PORT        = int(os.getenv("PORT", "10000"))
ADMINS_ENV  = os.getenv("ADMINS", "")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty (Settings ‚Üí Environment).")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL is empty (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your.onrender.com).")

ADMIN_IDS = {int(x) for x in ADMINS_ENV.split(",") if x.strip().isdigit()} or {133637780}

DB_FILE        = "quiz.db"
QUESTIONS_FILE = "questions.json"
COUNTRIES      = ["–†–æ—Å—Å–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê—Ä–º–µ–Ω–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"]
QUESTION_SECONDS = 30
COUNTDOWN         = 3

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ ¬´–∏–¥—ë—Ç —Ä–∞—É–Ω–¥¬ª
QUIZ_ACTIVE = False

# ---------- –ú–û–î–ï–õ–ò ----------
@dataclass
class Question:
    text: str
    options: List[str]
    correct: List[int]
    multiple: bool

@dataclass
class UserQuizState:
    index: int = 0
    last_poll_id: Optional[str] = None
    started: bool = False
    finished: bool = False

QUESTIONS: List[Question] = []
STATE: Dict[int, UserQuizState] = {}

# ---------- –ë–ê–ó–ê ----------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        country TEXT
    )""")
    conn.execute("""CREATE TABLE IF NOT EXISTS answers(
        user_id INTEGER,
        q_index INTEGER,
        option_ids TEXT,
        correct INTEGER
    )""")
    return conn

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def get_registered_users() -> List[int]:
    with db() as conn:
        rows = conn.execute("SELECT user_id FROM users WHERE country IS NOT NULL").fetchall()
    return [r[0] for r in rows]

# ---------- –í–û–ü–†–û–°–´ ----------
def _validate_questions(data: List[dict]) -> List[Question]:
    out: List[Question] = []
    if not isinstance(data, list):
        raise ValueError("Root of questions JSON must be a list.")
    for i, q in enumerate(data, start=1):
        text = (q.get("text") or "").strip()
        options = q.get("options") or []
        correct = q.get("correct_indices") or []
        multiple = bool(q.get("multiple", False))
        if not text or not isinstance(options, list) or len(options) < 2:
            raise ValueError(f"Q{i}: invalid text/options")
        if not isinstance(correct, list) or not all(isinstance(ci, int) for ci in correct):
            raise ValueError(f"Q{i}: correct_indices must be list[int]")
        if any(ci < 0 or ci >= len(options) for ci in correct):
            raise ValueError(f"Q{i}: correct index out of range")
        if not correct:
            raise ValueError(f"Q{i}: at least one correct answer required")
        if len(correct) > 1 and not multiple:
            raise ValueError(f"Q{i}: multiple answers but multiple=false")
        out.append(Question(text, options, correct, multiple))
    return out

def load_questions_from_file() -> int:
    global QUESTIONS
    if not os.path.exists(QUESTIONS_FILE):
        QUESTIONS = []
        log.warning("%s not found. No questions loaded.", QUESTIONS_FILE)
        return 0
    with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    QUESTIONS = _validate_questions(data)
    log.info("Loaded %d questions.", len(QUESTIONS))
    return len(QUESTIONS)

async def set_questions_from_url(url: str) -> int:
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.get(url)
        r.raise_for_status()
        data = r.json()
    _ = _validate_questions(data)
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    return load_questions_from_file()

# ---------- –°–û–°–¢–û–Ø–ù–ò–ï ----------
def st(uid: int) -> UserQuizState:
    if uid not in STATE:
        STATE[uid] = UserQuizState()
    return STATE[uid]

def reset_user(uid: int):
    STATE.pop(uid, None)
    with db() as conn:
        conn.execute("DELETE FROM answers WHERE user_id=?", (uid,))

# ---------- –ö–í–ò–ó (–ª–∏—á–Ω—ã–π —á–∞—Ç) ----------
async def start_user_quiz(uid: int, ctx: ContextTypes.DEFAULT_TYPE, countdown: int = COUNTDOWN):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–∞—É–Ω–¥)."""
    s = st(uid)
    if s.started and not s.finished:
        return
    s.index = 0
    s.finished = False
    s.started = True

    if countdown > 0:
        msg = await ctx.bot.send_message(uid, f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {countdown}‚Ä¶")
        for left in range(countdown - 1, 0, -1):
            await asyncio.sleep(1)
            try:
                await msg.edit_text(f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {left}‚Ä¶")
            except:
                pass
        try:
            await msg.edit_text("üî• –ü–æ–µ—Ö–∞–ª–∏!")
        except:
            await ctx.bot.send_message(uid, "üî• –ü–æ–µ—Ö–∞–ª–∏!")

    await send_next(uid, ctx)

async def send_next(uid: int, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(uid)
    if s.index >= len(QUESTIONS):
        s.finished = True
        await ctx.bot.send_message(uid, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    q = QUESTIONS[s.index]
    head = f"–í–æ–ø—Ä–æ—Å {s.index+1}/{len(QUESTIONS)}"
    suffix = " (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)" if q.multiple else ""
    rules = f"\n‚è± –ù–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è {QUESTION_SECONDS} —Å–µ–∫—É–Ω–¥."
    text = f"{head}\n{q.text}{suffix}{rules}"

    msg = await ctx.bot.send_poll(
        chat_id=uid,
        question=text,
        options=q.options,
        is_anonymous=False,
        allows_multiple_answers=q.multiple
    )
    s.last_poll_id = msg.poll.id

    async def q_timeout(poll_id: str, user_id: int):
        await asyncio.sleep(QUESTION_SECONDS)
        s2 = st(user_id)
        if s2.last_poll_id == poll_id and not s2.finished:
            await ctx.bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—à–ª–æ.")
            s2.index += 1
            await send_next(user_id, ctx)

    asyncio.create_task(q_timeout(msg.poll.id, uid))

# ---------- –û–¢–ß–Å–¢ ----------
async def export_results_file() -> str:
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Answers"
    ws.append(["–°—Ç—Ä–∞–Ω–∞","–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å","–í–æ–ø—Ä–æ—Å ‚Ññ","–û—Ç–≤–µ—Ç(—ã) –∏–Ω–¥–µ–∫—Å—ã","–ü—Ä–∞–≤–∏–ª—å–Ω–æ"])

    answers: List[Tuple[int,int,str,int]] = []
    user_country: Dict[int,str] = {}
    with db() as conn:
        for uid,cnt in conn.execute("SELECT user_id,country FROM users"):
            user_country[uid] = cnt or "?"
        for row in conn.execute("SELECT user_id,q_index,option_ids,correct FROM answers"):
            answers.append(row)

    for uid,qidx,opt,corr in answers:
        ws.append([user_country.get(uid,"?"), uid, qidx+1, opt, "–î–∞" if corr else "–ù–µ—Ç"])
    for col in ws.columns:
        ws.column_dimensions[get_column_letter(col[0].column)].width = 18

    ws2 = wb.create_sheet("ByCountry")
    ws2.append(["–°—Ç—Ä–∞–Ω–∞","–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤","–û—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–≥–æ","–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö","–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö","–¢–æ—á–Ω–æ—Å—Ç—å, %"])
    stats: Dict[str, Dict[str,int]] = {}
    users: Dict[str, Set[int]] = {}
    for uid,qidx,opt,corr in answers:
        c = user_country.get(uid,"?")
        stats.setdefault(c, {"tot":0,"ok":0})
        users.setdefault(c,set()).add(uid)
        stats[c]["tot"] += 1
        if corr: stats[c]["ok"] += 1
    for c,s in stats.items():
        tot=s["tot"]; ok=s["ok"]; bad=tot-ok; ppl=len(users.get(c,set()))
        acc=round((ok/tot*100) if tot else 0.0,2)
        ws2.append([c,ppl,tot,ok,bad,acc])
    for col in ws2.columns:
        ws2.column_dimensions[get_column_letter(col[0].column)].width = 18

    ws3 = wb.create_sheet("ByCountryQuestion")
    ws3.append(["–°—Ç—Ä–∞–Ω–∞","–í–æ–ø—Ä–æ—Å ‚Ññ","–û—Ç–≤–µ—Ç–æ–≤","–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö","–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö","–¢–æ—á–Ω–æ—Å—Ç—å, %"])
    cqm: Dict[Tuple[str,int],Dict[str,int]] = {}
    for uid,qidx,opt,corr in answers:
        c=user_country.get(uid,"?")
        key=(c,qidx+1)
        d=cqm.setdefault(key,{"tot":0,"ok":0})
        d["tot"]+=1
        if corr: d["ok"]+=1
    for (c,qn),d in sorted(cqm.items(), key=lambda x:(x[0][0],x[0][1])):
        tot=d["tot"]; ok=d["ok"]; bad=tot-ok; acc=round((ok/tot*100) if tot else 0.0,2)
        ws3.append([c,qn,tot,ok,bad,acc])
    for col in ws3.columns:
        ws3.column_dimensions[get_column_letter(col[0].column)].width = 18

    path = f"results_{int(time.time())}.xlsx"
    wb.save(path)
    return path

# ---------- –ö–û–ú–ê–ù–î–´ (—É—á–∞—Å—Ç–Ω–∏–∫) ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –∏ –∂–¥—ë—Ç —Å—Ç–∞—Ä—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞."""
    if update.effective_chat.type != "private":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}") ] for c in COUNTRIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "
        "¬´–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞¬ª. –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def cmd_again(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Å–≤–æ–µ–π –ø–æ–ø—ã—Ç–∫–∏; –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω-—Å—Ç–∞—Ä—Ç–∞."""
    uid = update.effective_user.id
    reset_user(uid)
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}") ] for c in COUNTRIES]
    await update.message.reply_text(
        "üîÅ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É ‚Äî –∏ –æ–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –õ–∏—á–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã) –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞\n"
        "/again ‚Äî —Å–±—Ä–æ—Å —Å–≤–æ–µ–π –ø–æ–ø—ã—Ç–∫–∏\n\n"
        "–ê–¥–º–∏–Ω:\n"
        "/start_quiz ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
        "/report ‚Äî Excel-–æ—Ç—á—ë—Ç\n"
        "/reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å questions.json\n"
        "/setq <raw_json_url> ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ URL\n"
        "/status ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"
    )

# ---------- –ö–û–ú–ê–ù–î–´ (–∞–¥–º–∏–Ω) ----------
async def cmd_start_quiz(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ê–î–ú–ò–ù: –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –∫—Ç–æ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–ª–∏ —É–∂–µ —Å–±—Ä–æ—Å–∏–ª."""
    global QUIZ_ACTIVE
    if not is_admin(update.effective_user.id):
        return
    if not QUESTIONS:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /reload –∏–ª–∏ /setq.")
        return

    QUIZ_ACTIVE = True
    uids = get_registered_users()
    await update.message.reply_text(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è {len(uids)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –°—Ç–∞—Ä—Ç—É–µ–º –≤—Å–µ–º, —É –∫–æ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    started = 0
    for uid in uids:
        s = st(uid)
        if not s.started or s.finished:
            try:
                await update.get_bot().send_message(uid, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
                await start_user_quiz(uid, ctx, COUNTDOWN)
                started += 1
            except Exception as e:
                log.warning("Cannot start for %s: %s", uid, e)

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –ó–∞–ø—É—â–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {started}/{len(uids)}.")

async def cmd_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    await update.message.reply_text("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    path = await export_results_file()
    await ctx.bot.send_document(update.effective_user.id, open(path, "rb"), filename=os.path.basename(path))

async def cmd_reload(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    n = load_questions_from_file()
    await update.message.reply_text(f"–ü–µ—Ä–µ—á–∏—Ç–∞–ª {QUESTIONS_FILE}: –≤–æ–ø—Ä–æ—Å–æ–≤ {n}.")

async def cmd_setq(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if not ctx.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ RAW-—Å—Å—ã–ª–∫—É: /setq https://raw.githubusercontent.com/.../questions.json")
        return
    url = ctx.args[0]
    try:
        n = await set_questions_from_url(url)
        await update.message.reply_text(f"–ó–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í—Å–µ–≥–æ: {n}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    with db() as conn:
        rows = conn.execute("SELECT country, COUNT(*) FROM users WHERE country IS NOT NULL GROUP BY country").fetchall()
    total = sum(r[1] for r in rows)
    lines = [f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total}"]
    for c, cnt in rows:
        lines.append(f"- {c}: {cnt}")
    await update.message.reply_text("\n".join(lines))

# ---------- –ö–ù–û–ü–ö–ò ----------
async def on_button(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    data = cq.data or ""

    if data.startswith("set_country:"):
        country = data.split(":",1)[1]
        uid = cq.from_user.id

        # –ó–∞–ø–∏—à–µ–º/–æ–±–Ω–æ–≤–∏–º —Å—Ç—Ä–∞–Ω—É (–Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)
        with db() as conn:
            conn.execute(
                "INSERT INTO users(user_id,country) VALUES(?,?) "
                "ON CONFLICT(user_id) DO UPDATE SET country=excluded.country",
                (uid, country)
            )

        # –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ù–ï –±—É–¥–µ–º ‚Äî —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.
        # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ ‚Äî —É –Ω–µ–≥–æ –µ—Å—Ç—å /again.
        msg = (
            f"–°—Ç—Ä–∞–Ω–∞: {country} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –í—Ä–µ–º—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî {QUESTION_SECONDS} —Å–µ–∫.\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ –ø–æ–∑–∂–µ: –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /again."
        )
        try:
            await cq.edit_message_text(msg)
        except:
            await cq.message.reply_text(msg)

# ---------- POLL ----------
async def on_poll_answer(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ans = update.poll_answer
    uid = ans.user.id
    s = st(uid)
    if s.finished or s.last_poll_id != ans.poll_id:
        return

    q = QUESTIONS[s.index]
    chosen = ans.option_ids or []
    correct = int(set(chosen) == set(q.correct))
    with db() as conn:
        conn.execute(
            "INSERT INTO answers(user_id,q_index,option_ids,correct) VALUES(?,?,?,?)",
            (uid, s.index, json.dumps(chosen, ensure_ascii=False), correct)
        )
    s.index += 1
    await send_next(uid, ctx)

# ---------- APP ----------
def build_app() -> Application:
    load_questions_from_file()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –£—á–∞—Å—Ç–Ω–∏–∫
    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("again",  cmd_again))
    app.add_handler(CommandHandler("help",   cmd_help))

    # –ê–¥–º–∏–Ω
    app.add_handler(CommandHandler("start_quiz", cmd_start_quiz))
    app.add_handler(CommandHandler("report",     cmd_report))
    app.add_handler(CommandHandler("reload",     cmd_reload))
    app.add_handler(CommandHandler("setq",       cmd_setq))
    app.add_handler(CommandHandler("status",     cmd_status))

    # –ö–Ω–æ–ø–∫–∏ + –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(PollAnswerHandler(on_poll_answer))
    return app

if __name__ == "__main__":
    application = build_app()
    log.info("Starting in WEBHOOK mode on port %s; PUBLIC_URL=%s", PORT, PUBLIC_URL)
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,                         # —Å–∫—Ä—ã—Ç—ã–π –ø—É—Ç—å
        webhook_url=f"{PUBLIC_URL}/{BOT_TOKEN}",    # Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å—é–¥–∞
        drop_pending_updates=True,
        allowed_updates=["message","callback_query","poll_answer"]
    )
