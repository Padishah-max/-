import logging, os, json, sqlite3, asyncio, time, threading
from dataclasses import dataclass
from typing import List, Optional
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, PollAnswerHandler, Application
)
import openpyxl
from openpyxl.utils import get_column_letter

# --------- –õ–û–ì–ò ---------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("quizbot")

# --------- –ö–û–ù–§–ò–ì ---------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8424093071:AAEfQ7aY0s5PomRRHLAuGdKC17eJiUFzFHM")
ADMIN_IDS = {133637780}
DB_FILE = "quiz.db"
COUNTRIES = ["–†–æ—Å—Å–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê—Ä–º–µ–Ω–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"]

QUESTION_SECONDS = 30
PORT = int(os.environ.get("PORT", "10000"))  # Render –¥–ª—è Web Service –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç

# --------- –ú–û–î–ï–õ–ò ---------
@dataclass
class Question:
    text: str
    options: List[str]
    correct: List[int]
    multiple: bool

@dataclass
class QuizState:
    index: int = 0
    last_poll_id: Optional[str] = None
    finished: bool = False

QUESTIONS: List[Question] = []
STATE: dict[int, QuizState] = {}

# --------- –ó–î–û–†–û–í–¨–ï (HTTP /health) ---------
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ("/", "/health"):
            body = b"ok"
            self.send_response(200)
            self.send_header("Content-Type", "text/plain; charset=utf-8")
            self.send_header("Content-Length", str(len(body)))
            self.end_headers()
            self.wfile.write(body)
        else:
            self.send_error(404)

def start_health_server(port: int):
    # –õ—ë–≥–∫–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã run_polling –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª)
    server = HTTPServer(("0.0.0.0", port), HealthHandler)
    t = threading.Thread(target=server.serve_forever, daemon=True)
    t.start()
    log.info("Health server started on :%s (/health)", port)

# --------- –ë–ê–ó–ê ---------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        country TEXT
    )""")
    conn.execute("""CREATE TABLE IF NOT EXISTS answers(
        user_id INTEGER,
        q_index INTEGER,
        option_ids TEXT,
        correct INTEGER
    )""")
    return conn

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

# --------- –í–û–ü–†–û–°–´ ---------
def load_questions_from_file():
    global QUESTIONS
    path = "questions.json"
    if not os.path.exists(path):
        log.warning("questions.json not found; using empty list")
        QUESTIONS = []
        return
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    QUESTIONS = [Question(q["text"], q["options"], q["correct_indices"], q["multiple"]) for q in data]
    log.info("Loaded %d questions", len(QUESTIONS))

# --------- –°–û–°–¢–û–Ø–ù–ò–ï ---------
def get_state(chat_id: int) -> QuizState:
    if chat_id not in STATE:
        STATE[chat_id] = QuizState()
    return STATE[chat_id]

# --------- –õ–û–ì–ò–ö–ê –í–û–ü–†–û–°–û–í ---------
async def send_question(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    st = get_state(chat_id)
    if st.index >= len(QUESTIONS):
        await finish_quiz(chat_id, context)
        return

    q = QUESTIONS[st.index]
    title = f"–í–æ–ø—Ä–æ—Å {st.index+1}/{len(QUESTIONS)}"
    suffix = " (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)" if q.multiple else ""
    qtext = f"{title}\n{q.text}{suffix}"

    msg = await context.bot.send_poll(
        chat_id=chat_id,
        question=qtext,
        options=q.options,
        is_anonymous=False,
        allows_multiple_answers=q.multiple
    )
    st.last_poll_id = msg.poll.id

    async def timeout():
        await asyncio.sleep(QUESTION_SECONDS)
        if st.last_poll_id == msg.poll.id and not st.finished:
            await context.bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
            st.index += 1
            await send_question(chat_id, context)
    asyncio.create_task(timeout())

async def finish_quiz(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    st = get_state(chat_id)
    if st.finished:
        return
    st.finished = True
    await context.bot.send_message(chat_id, "‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    if is_admin(chat_id):
        await export_results(chat_id, context)

# --------- –•–ï–ù–î–õ–ï–†–´ ---------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}")] for c in COUNTRIES]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=InlineKeyboardMarkup(kb))

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    data = cq.data or ""

    if data.startswith("set_country:"):
        country = data.split(":", 1)[1]
        with db() as conn:
            conn.execute("INSERT INTO users(user_id,country) VALUES(?,?) "
                         "ON CONFLICT(user_id) DO UPDATE SET country=excluded.country",
                         (cq.from_user.id, country))
        if is_admin(cq.from_user.id):
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz_now"),
                 InlineKeyboardButton("‚è≥ –ü–æ–∑–∂–µ", callback_data="start_quiz_later")]
            ])
            try:
                await cq.edit_message_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?", reply_markup=kb)
            except:
                await cq.message.reply_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?", reply_markup=kb)
        else:
            try:
                await cq.edit_message_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ñ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
            except:
                await cq.message.reply_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ñ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return

    if data == "start_quiz_now":
        await cq.answer()
        await cq.edit_message_text("–°—Ç–∞—Ä—Ç—É–µ–º!")
        chat_id = cq.message.chat_id
        st = get_state(chat_id)
        st.index = 0
        st.finished = False
        await send_question(chat_id, context)
        return

    if data == "start_quiz_later":
        await cq.answer()
        try:
            await cq.edit_message_text("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ: /start ‚Üí –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É (—É –∞–¥–º–∏–Ω–∞ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏).")
        except:
            pass
        return

async def on_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ans = update.poll_answer
    qid = ans.poll_id
    uid = ans.user.id

    # –Ω–∞–π—Ç–∏ —á–∞—Ç, –≥–¥–µ –∞–∫—Ç–∏–≤–µ–Ω —ç—Ç–æ—Ç poll
    st_chat_id = None
    st = None
    for chat_id, s in STATE.items():
        if s.last_poll_id == qid:
            st_chat_id = chat_id
            st = s
            break
    if not st or st.finished:
        return

    q = QUESTIONS[st.index]
    chosen = ans.option_ids or []
    correct = set(chosen) == set(q.correct)

    with db() as conn:
        conn.execute("INSERT INTO answers(user_id,q_index,option_ids,correct) VALUES(?,?,?,?)",
                     (uid, st.index, json.dumps(chosen, ensure_ascii=False), int(correct)))

    # –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if st.last_poll_id == qid:
        st.index += 1
        await send_question(st_chat_id, context)

# --------- –û–¢–ß–Å–¢ ---------
async def export_results(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Answers"
    ws.append(["–°—Ç—Ä–∞–Ω–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"])
    with db() as conn:
        rows = conn.execute("SELECT user_id,q_index,option_ids,correct FROM answers").fetchall()
        for uid,qidx,opt,corr in rows:
            country_row = conn.execute("SELECT country FROM users WHERE user_id=?",(uid,)).fetchone()
            country = country_row[0] if country_row else "?"
            ws.append([country, uid, qidx+1, opt, "–î–∞" if corr else "–ù–µ—Ç"])
    for col in ws.columns:
        ws.column_dimensions[get_column_letter(col[0].column)].width = 18
    path = f"results_{int(time.time())}.xlsx"
    wb.save(path)
    await context.bot.send_document(chat_id, open(path, "rb"), filename=os.path.basename(path))

# --------- APP ---------
def build_app() -> Application:
    load_questions_from_file()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(PollAnswerHandler(on_poll_answer))
    return app

if __name__ == "__main__":
    # 1) –ø–æ–¥–Ω–∏–º–∞–µ–º health-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render –∏ –ø–∏–Ω–≥–µ—Ä–∞)
    start_health_server(PORT)
    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–±–µ–∑ await/async –∑–¥–µ—Å—å)
    application = build_app()
    application.run_polling(drop_pending_updates=True)
