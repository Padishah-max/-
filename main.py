import logging, os, json, sqlite3, asyncio, time, threading
from dataclasses import dataclass
from typing import List, Optional, Dict, Set, Tuple
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, PollAnswerHandler, Application
)
import openpyxl
from openpyxl.utils import get_column_letter

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("quizbot")

# ---------- –ö–û–ù–§–ò–ì ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
# –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMINS="123,456"
_admin_env = os.environ.get("ADMINS")
ADMIN_IDS = {int(x) for x in _admin_env.split(",")} if _admin_env else {133637780}

DB_FILE = "quiz.db"
COUNTRIES = ["–†–æ—Å—Å–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê—Ä–º–µ–Ω–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"]

QUESTION_SECONDS = 30            # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å
DEFAULT_COUNTDOWN = 3            # –∫–æ—Ä–æ—Ç–∫–∏–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç, —á—Ç–æ–±—ã –≤—Å–µ –≤–∏–¥–µ–ª–∏ —Å—Ç–∞—Ä—Ç
PORT = int(os.environ.get("PORT", "10000"))   # –¥–ª—è Render /health

# ---------- –ú–û–î–ï–õ–ò ----------
@dataclass
class Question:
    text: str
    options: List[str]
    correct: List[int]
    multiple: bool

@dataclass
class UserQuizState:
    index: int = 0
    last_poll_id: Optional[str] = None
    started: bool = False
    finished: bool = False

QUESTIONS: List[Question] = []
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ: user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ
STATE: Dict[int, UserQuizState] = {}

# ---------- HEALTH (/health) ----------
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ("/", "/health"):
            body = b"ok"
            self.send_response(200)
            self.send_header("Content-Type", "text/plain; charset=utf-8")
            self.send_header("Content-Length", str(len(body)))
            self.end_headers()
            self.wfile.write(body)
        else:
            self.send_error(404)
    def log_message(self, *args, **kwargs):
        return

def start_health_server(port: int):
    server = HTTPServer(("0.0.0.0", port), HealthHandler)
    t = threading.Thread(target=server.serve_forever, daemon=True)
    t.start()
    log.info("Health server started on :%s (/health)", port)

# ---------- –ë–ê–ó–ê ----------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        country TEXT
    )""")
    conn.execute("""CREATE TABLE IF NOT EXISTS answers(
        user_id INTEGER,
        q_index INTEGER,
        option_ids TEXT,
        correct INTEGER
    )""")
    return conn

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

# ---------- –í–û–ü–†–û–°–´ ----------
def load_questions_from_file():
    global QUESTIONS
    path = "questions.json"
    if not os.path.exists(path):
        log.warning("questions.json not found; using empty list")
        QUESTIONS = []
        return
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    QUESTIONS = [Question(q["text"], q["options"], q["correct_indices"], q["multiple"]) for q in data]
    log.info("Loaded %d questions", len(QUESTIONS))

# ---------- –°–û–°–¢–û–Ø–ù–ò–ï ----------
def get_state(user_id: int) -> UserQuizState:
    if user_id not in STATE:
        STATE[user_id] = UserQuizState()
    return STATE[user_id]

# ---------- –°–¢–ê–†–¢ –ö–í–ò–ó–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----------
async def start_user_quiz(user_id: int, context: ContextTypes.DEFAULT_TYPE, countdown_sec: int = DEFAULT_COUNTDOWN):
    st = get_state(user_id)
    if st.started and not st.finished:
        return
    st.index = 0
    st.finished = False
    st.started = True

    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
    if countdown_sec and countdown_sec > 0:
        text = f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {countdown_sec}‚Ä¶"
        msg = await context.bot.send_message(user_id, text)
        for left in range(countdown_sec - 1, 0, -1):
            await asyncio.sleep(1)
            try:
                await msg.edit_text(f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {left}‚Ä¶")
            except:
                pass
        try:
            await msg.edit_text("üî• –ü–æ–µ—Ö–∞–ª–∏!")
        except:
            await context.bot.send_message(user_id, "üî• –ü–æ–µ—Ö–∞–ª–∏!")

    await send_next_question(user_id, context)

# ---------- –û–¢–ü–†–ê–í–ö–ê –í–û–ü–†–û–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ----------
async def send_next_question(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    st = get_state(user_id)
    if st.index >= len(QUESTIONS):
        st.finished = True
        # –£—á–∞—Å—Ç–Ω–∏–∫—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        await context.bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    q = QUESTIONS[st.index]
    title = f"–í–æ–ø—Ä–æ—Å {st.index+1}/{len(QUESTIONS)}"
    suffix = " (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)" if q.multiple else ""
    rules = f"\n‚è± –ù–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è {QUESTION_SECONDS} —Å–µ–∫—É–Ω–¥."
    qtext = f"{title}\n{q.text}{suffix}{rules}"

    msg = await context.bot.send_poll(
        chat_id=user_id,
        question=qtext,
        options=q.options,
        is_anonymous=False,
        allows_multiple_answers=q.multiple
    )
    st.last_poll_id = msg.poll.id

    # –¢–∞–π–º–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def per_question_timeout(this_poll_id: str, uid: int):
        await asyncio.sleep(QUESTION_SECONDS)
        st_local = get_state(uid)
        if st_local.last_poll_id == this_poll_id and not st_local.finished:
            await context.bot.send_message(uid, "‚è∞ –í—Ä–µ–º—è –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—à–ª–æ.")
            st_local.index += 1
            await send_next_question(uid, context)
    asyncio.create_task(per_question_timeout(msg.poll.id, user_id))

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
    if update.effective_chat.type != "private":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}") ] for c in COUNTRIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∑–∞—Ç–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
        f"–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è {QUESTION_SECONDS} —Å–µ–∫—É–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "ü§ñ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å, –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã."
    )
    await update.message.reply_text(txt)

# –ê–¥–º–∏–Ω —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç—á—ë—Ç
async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é –æ–±—â–∏–π –æ—Ç—á—ë—Ç‚Ä¶")
    path = await export_results_file()
    await context.bot.send_document(update.effective_user.id, open(path, "rb"), filename=os.path.basename(path))

# –î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ–º (–æ–ø—Ü–∏—è)
async def cmd_finish_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    # –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –≤—Å–µ–º finished, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã
    for uid, st in STATE.items():
        st.finished = True
    await update.message.reply_text("‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    path = await export_results_file()
    await context.bot.send_document(update.effective_user.id, open(path, "rb"), filename=os.path.basename(path))

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ----------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    data = cq.data or ""
    if data.startswith("set_country:"):
        country = data.split(":", 1)[1]
        uid = cq.from_user.id
        with db() as conn:
            conn.execute("INSERT INTO users(user_id,country) VALUES(?,?) "
                         "ON CONFLICT(user_id) DO UPDATE SET country=excluded.country",
                         (uid, country))
        try:
            await cq.edit_message_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∏–Ω–∞–µ–º‚Ä¶")
        except:
            await cq.message.reply_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∏–Ω–∞–µ–º‚Ä¶")
        # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –¥–ª—è –≠–¢–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await start_user_quiz(uid, context)

# ---------- –û–¢–í–ï–¢–´ (POLL) ----------
async def on_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ans = update.poll_answer
    qid = ans.poll_id
    uid = ans.user.id

    # –Ω–∞—Ö–æ–¥–∏–º —á—å—ë —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st = get_state(uid)
    if st.finished:
        return
    if st.last_poll_id != qid:
        return  # –Ω–µ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    q = QUESTIONS[st.index]
    chosen = ans.option_ids or []
    correct = int(set(chosen) == set(q.correct))
    with db() as conn:
        conn.execute("INSERT INTO answers(user_id,q_index,option_ids,correct) VALUES(?,?,?,?)",
                     (uid, st.index, json.dumps(chosen, ensure_ascii=False), correct))

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    st.index += 1
    await send_next_question(uid, context)

# ---------- –û–¢–ß–Å–¢ (—Ñ–∞–π–ª) ----------
async def export_results_file() -> str:
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Answers"
    ws.append(["–°—Ç—Ä–∞–Ω–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç(—ã) –∏–Ω–¥–µ–∫—Å—ã", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"])

    answers_rows: List[Tuple[int,int,str,int]] = []
    countries_by_user: Dict[int, str] = {}

    with db() as conn:
        for uid, country in conn.execute("SELECT user_id,country FROM users"):
            countries_by_user[uid] = country or "?"
        for uid,qidx,opt,corr in conn.execute("SELECT user_id,q_index,option_ids,correct FROM answers"):
            answers_rows.append((uid,qidx,opt,corr))

    for uid,qidx,opt,corr in answers_rows:
        country = countries_by_user.get(uid, "?")
        ws.append([country, uid, qidx+1, opt, "–î–∞" if corr else "–ù–µ—Ç"])

    for col in ws.columns:
        ws.column_dimensions[get_column_letter(col[0].column)].width = 18

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã —Å–≤–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–≤–æ–ø—Ä–æ—Å–∞–º (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî —Å–∫–∞–∂–∏—Ç–µ)
    path = f"results_{int(time.time())}.xlsx"
    wb.save(path)
    log.info("Results exported -> %s", path)
    return path

# ---------- APP ----------
def build_app() -> Application:
    load_questions_from_file()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("report", cmd_report))      # –∞–¥–º–∏–Ω
    app.add_handler(CommandHandler("finish_all", cmd_finish_all))  # –∞–¥–º–∏–Ω
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(PollAnswerHandler(on_poll_answer))
    return app

if __name__ == "__main__":
    # –Ω–µ–±–æ–ª—å—à–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/pinger
    start_health_server(PORT)
    application = build_app()
    application.run_polling(drop_pending_updates=True, allowed_updates=["message","callback_query","poll_answer"])
