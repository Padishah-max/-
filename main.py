import os, json, sqlite3, asyncio, time, threading, logging
from dataclasses import dataclass
from typing import List, Optional, Dict, Set, Tuple
from http.server import BaseHTTPRequestHandler, HTTPServer

import httpx
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    PollAnswerHandler, ContextTypes, Application
)
import openpyxl
from openpyxl.utils import get_column_letter

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("quizbot")

# -------------------- –ö–û–ù–§–ò–ì --------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is empty")

# –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: ADMINS="123,456"
_adm_env = os.environ.get("ADMINS", "").strip()
ADMIN_IDS = {int(x) for x in _adm_env.split(",") if x.strip().isdigit()} or {133637780}

DB_FILE = "quiz.db"
COUNTRIES = ["–†–æ—Å—Å–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê—Ä–º–µ–Ω–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"]

QUESTION_SECONDS = 30             # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å
DEFAULT_COUNTDOWN = 3             # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—Å—á—ë—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
PORT = int(os.environ.get("PORT", "10000"))

QUESTIONS_FILE = "questions.json"  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏

# -------------------- –ú–û–î–ï–õ–ò --------------------
@dataclass
class Question:
    text: str
    options: List[str]
    correct: List[int]   # –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
    multiple: bool

@dataclass
class UserQuizState:
    index: int = 0
    last_poll_id: Optional[str] = None
    started: bool = False
    finished: bool = False

QUESTIONS: List[Question] = []           # —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
STATE: Dict[int, UserQuizState] = {}     # user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# -------------------- HEALTH (/health) --------------------
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ("/", "/health"):
            body = b"ok"
            self.send_response(200)
            self.send_header("Content-Type", "text/plain; charset=utf-8")
            self.send_header("Content-Length", str(len(body)))
            self.end_headers()
            self.wfile.write(body)
        else:
            self.send_error(404)

    def log_message(self, *_):
        return

def start_health_server(port: int):
    srv = HTTPServer(("0.0.0.0", port), HealthHandler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    log.info("health server on :%s", port)

# -------------------- –ë–ê–ó–ê --------------------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS users(
          user_id INTEGER PRIMARY KEY,
          country TEXT
        )
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS answers(
          user_id INTEGER,
          q_index INTEGER,
          option_ids TEXT,
          correct INTEGER
        )
    """)
    return conn

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

# -------------------- –í–û–ü–†–û–°–´ --------------------
def validate_questions(data: List[dict]) -> List[Question]:
    if not isinstance(data, list):
        raise ValueError("questions root must be a list")
    qs: List[Question] = []
    for i, q in enumerate(data, start=1):
        text = q.get("text", "").strip()
        options = q.get("options", [])
        correct = q.get("correct_indices", [])
        multiple = bool(q.get("multiple", False))
        if not text or not isinstance(options, list) or len(options) < 2:
            raise ValueError(f"Q{i}: invalid options/text")
        if not isinstance(correct, list) or not all(isinstance(ci, int) for ci in correct):
            raise ValueError(f"Q{i}: correct_indices must be int[]")
        if any(ci < 0 or ci >= len(options) for ci in correct):
            raise ValueError(f"Q{i}: correct index out of range")
        if not correct:
            raise ValueError(f"Q{i}: must have at least one correct answer")
        if len(correct) > 1 and not multiple:
            raise ValueError(f"Q{i}: multiple answers provided but multiple=false")
        qs.append(Question(text=text, options=options, correct=correct, multiple=multiple))
    return qs

def load_questions_from_file() -> int:
    global QUESTIONS
    if not os.path.exists(QUESTIONS_FILE):
        QUESTIONS = []
        return 0
    with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    QUESTIONS = validate_questions(data)
    log.info("Loaded %d questions from file", len(QUESTIONS))
    return len(QUESTIONS)

async def set_questions_from_url(url: str) -> int:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç JSON –ø–æ URL, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç questions.json."""
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.get(url)
        r.raise_for_status()
        data = r.json()
    qs = validate_questions(data)
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    load_questions_from_file()
    return len(qs)

# -------------------- –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø --------------------
def get_state(uid: int) -> UserQuizState:
    if uid not in STATE:
        STATE[uid] = UserQuizState()
    return STATE[uid]

def reset_user(uid: int):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—ã + —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    with db() as conn:
        conn.execute("DELETE FROM answers WHERE user_id=?", (uid,))
    STATE.pop(uid, None)

# -------------------- –õ–û–ì–ò–ö–ê –ö–í–ò–ó–ê (–ª–∏—á–Ω—ã–π —á–∞—Ç) --------------------
async def start_user_quiz(uid: int, context: ContextTypes.DEFAULT_TYPE, countdown_sec: int = DEFAULT_COUNTDOWN):
    st = get_state(uid)
    if st.started and not st.finished:
        return
    st.index = 0
    st.finished = False
    st.started = True

    if countdown_sec > 0:
        msg = await context.bot.send_message(uid, f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {countdown_sec}‚Ä¶")
        for left in range(countdown_sec - 1, 0, -1):
            await asyncio.sleep(1)
            try:
                await msg.edit_text(f"üöÄ –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {left}‚Ä¶")
            except:
                pass
        try:
            await msg.edit_text("üî• –ü–æ–µ—Ö–∞–ª–∏!")
        except:
            await context.bot.send_message(uid, "üî• –ü–æ–µ—Ö–∞–ª–∏!")

    await send_next_question(uid, context)

async def send_next_question(uid: int, context: ContextTypes.DEFAULT_TYPE):
    st = get_state(uid)
    if st.index >= len(QUESTIONS):
        st.finished = True
        await context.bot.send_message(uid, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    q = QUESTIONS[st.index]
    head = f"–í–æ–ø—Ä–æ—Å {st.index+1}/{len(QUESTIONS)}"
    suffix = " (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)" if q.multiple else ""
    rules = f"\n‚è± –ù–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è {QUESTION_SECONDS} —Å–µ–∫—É–Ω–¥."
    text = f"{head}\n{q.text}{suffix}{rules}"

    msg = await context.bot.send_poll(
        chat_id=uid,
        question=text,
        options=q.options,
        is_anonymous=False,
        allows_multiple_answers=q.multiple
    )
    st.last_poll_id = msg.poll.id

    async def per_q_timeout(poll_id: str, _uid: int):
        await asyncio.sleep(QUESTION_SECONDS)
        stloc = get_state(_uid)
        if stloc.last_poll_id == poll_id and not stloc.finished:
            await context.bot.send_message(_uid, "‚è∞ –í—Ä–µ–º—è –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—à–ª–æ.")
            stloc.index += 1
            await send_next_question(_uid, context)

    asyncio.create_task(per_q_timeout(msg.poll.id, uid))

# -------------------- –û–¢–ß–Å–¢ --------------------
async def export_results_file() -> str:
    wb = openpyxl.Workbook()

    # –õ–∏—Å—Ç 1: –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    ws = wb.active
    ws.title = "Answers"
    ws.append(["–°—Ç—Ä–∞–Ω–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í–æ–ø—Ä–æ—Å ‚Ññ", "–û—Ç–≤–µ—Ç(—ã) –∏–Ω–¥–µ–∫—Å—ã", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"])

    answers_rows: List[Tuple[int,int,str,int]] = []
    user_country: Dict[int, str] = {}

    with db() as conn:
        for uid, country in conn.execute("SELECT user_id,country FROM users"):
            user_country[uid] = country or "?"
        for uid, qidx, opt, corr in conn.execute("SELECT user_id,q_index,option_ids,correct FROM answers"):
            answers_rows.append((uid, qidx, opt, corr))

    for uid, qidx, opt, corr in answers_rows:
        ws.append([user_country.get(uid, "?"), uid, qidx+1, opt, "–î–∞" if corr else "–ù–µ—Ç"])

    for col in ws.columns:
        ws.column_dimensions[get_column_letter(col[0].column)].width = 18

    # –õ–∏—Å—Ç 2: –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (—Å–≤–æ–¥)
    ws2 = wb.create_sheet("ByCountry")
    ws2.append(["–°—Ç—Ä–∞–Ω–∞", "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "–û—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–≥–æ", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–¢–æ—á–Ω–æ—Å—Ç—å, %"])
    stats: Dict[str, Dict[str,int]] = {}
    users_by_country: Dict[str, Set[int]] = {}

    for uid, qidx, opt, corr in answers_rows:
        c = user_country.get(uid, "?")
        stats.setdefault(c, {"tot":0, "ok":0})
        users_by_country.setdefault(c, set()).add(uid)
        stats[c]["tot"] += 1
        if corr: stats[c]["ok"] += 1

    for c, s in stats.items():
        tot = s["tot"]; ok = s["ok"]; bad = tot - ok
        ppl = len(users_by_country.get(c, set()))
        acc = round((ok/tot*100) if tot else 0.0, 2)
        ws2.append([c, ppl, tot, ok, bad, acc])

    for col in ws2.columns:
        ws2.column_dimensions[get_column_letter(col[0].column)].width = 18

    # –õ–∏—Å—Ç 3: –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º
    ws3 = wb.create_sheet("ByCountryQuestion")
    ws3.append(["–°—Ç—Ä–∞–Ω–∞", "–í–æ–ø—Ä–æ—Å ‚Ññ", "–û—Ç–≤–µ—Ç–æ–≤", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–¢–æ—á–Ω–æ—Å—Ç—å, %"])
    cqm: Dict[Tuple[str,int], Dict[str,int]] = {}

    for uid, qidx, opt, corr in answers_rows:
        c = user_country.get(uid, "?")
        key = (c, qidx+1)
        d = cqm.setdefault(key, {"tot":0, "ok":0})
        d["tot"] += 1
        if corr: d["ok"] += 1

    for (c, qn), d in sorted(cqm.items(), key=lambda x: (x[0][0], x[0][1])):
        tot = d["tot"]; ok = d["ok"]; bad = tot - ok
        acc = round((ok/tot*100) if tot else 0.0, 2)
        ws3.append([c, qn, tot, ok, bad, acc])

    for col in ws3.columns:
        ws3.column_dimensions[get_column_letter(col[0].column)].width = 18

    path = f"results_{int(time.time())}.xlsx"
    wb.save(path)
    return path

# -------------------- –ö–û–ú–ê–ù–î–´ --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
    if update.effective_chat.type != "private":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}") ] for c in COUNTRIES]
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        f"–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è {QUESTION_SECONDS} —Å–µ–∫—É–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –õ–ò–ß–ù–û–ú —á–∞—Ç–µ.\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å (–≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã)\n"
        "/restart ‚Äî –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ (—Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–∫–∏)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/report ‚Äî –ø–æ–ª—É—á–∏—Ç—å Excel-–æ—Ç—á—ë—Ç\n"
        "/reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π questions.json\n"
        "/setq <raw_json_url> ‚Äî —Å–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ URL –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å"
    )

async def cmd_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    reset_user(uid)
    kb = [[InlineKeyboardButton(c, callback_data=f"set_country:{c}") ] for c in COUNTRIES]
    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=InlineKeyboardMarkup(kb))

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    await update.message.reply_text("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    path = await export_results_file()
    await context.bot.send_document(update.effective_user.id, open(path, "rb"), filename=os.path.basename(path))

async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    n = load_questions_from_file()
    await update.message.reply_text(f"–ü–µ—Ä–µ—á–∏—Ç–∞–ª {QUESTIONS_FILE}: –≤–æ–ø—Ä–æ—Å–æ–≤ {n}.")

async def cmd_setq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RAW JSON: /setq https://raw.githubusercontent.com/.../questions.json")
        return
    url = context.args[0]
    try:
        n = await set_questions_from_url(url)
        await update.message.reply_text(f"–ó–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ URL. –í—Å–µ–≥–æ: {n}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# -------------------- –ö–ù–û–ü–ö–ò --------------------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    data = cq.data or ""
    if data.startswith("set_country:"):
        country = data.split(":", 1)[1]
        uid = cq.from_user.id

        # –ê–≤—Ç–æ—Å–±—Ä–æ—Å –ø—Ä–æ—à–ª–æ–π –ø–æ–ø—ã—Ç–∫–∏
        reset_user(uid)

        # –∑–∞–ø–∏—à–µ–º/–æ–±–Ω–æ–≤–∏–º —Å—Ç—Ä–∞–Ω—É
        with db() as conn:
            conn.execute(
                "INSERT INTO users(user_id,country) VALUES(?,?) "
                "ON CONFLICT(user_id) DO UPDATE SET country=excluded.country",
                (uid, country)
            )

        try:
            await cq.edit_message_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∏–Ω–∞–µ–º‚Ä¶")
        except:
            await cq.message.reply_text(f"–°—Ç—Ä–∞–Ω–∞: {country}. –ù–∞—á–∏–Ω–∞–µ–º‚Ä¶")

        # —Å—Ç–∞—Ä—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        await start_user_quiz(uid, context)

# -------------------- POLL ANSWERS --------------------
async def on_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ans = update.poll_answer
    uid = ans.user.id
    st = get_state(uid)
    if st.finished or st.last_poll_id != ans.poll_id:
        return

    q = QUESTIONS[st.index]
    chosen = ans.option_ids or []
    correct = int(set(chosen) == set(q.correct))

    with db() as conn:
        conn.execute(
            "INSERT INTO answers(user_id,q_index,option_ids,correct) VALUES(?,?,?,?)",
            (uid, st.index, json.dumps(chosen, ensure_ascii=False), correct)
        )

    st.index += 1
    await send_next_question(uid, context)

# -------------------- APP --------------------
def build_app() -> Application:
    load_questions_from_file()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("restart", cmd_restart))
    app.add_handler(CommandHandler("report", cmd_report))
    app.add_handler(CommandHandler("reload", cmd_reload))
    app.add_handler(CommandHandler("setq", cmd_setq))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(PollAnswerHandler(on_poll_answer))
    return app

if __name__ == "__main__":
    start_health_server(PORT)  # –¥–ª—è Render/–ø–∏–Ω–≥–µ—Ä–∞
    application = build_app()
    application.run_polling(drop_pending_updates=True,
                            allowed_updates=["message","callback_query","poll_answer"])
